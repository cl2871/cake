<!-- 
	html body starts here 
	code is modified from Google Places sample code
	code sample from https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform 
		under Apache 2.0 License
-->

<div class="container">
	<form>

		<!-- Row: Delivery Address 
			user writes in their address that will be autofilled by the Places API
		-->
		<div class="row">
			<div class="col-md-2 mb-4">
			</div>
			<div class="col-md-8 mb-4">
				<label for="autocomplete">Delivery Address</label>
				<input id="autocomplete" class="form-control" placeholder="Please enter delivery address" onFocus="geolocate()" type="text">
			</div>
			<div class="col-md-2 mb-4">
			</div>
		</div>

		<!-- The following rows are filled by delivery address input -->

		<!-- Row: Street Address -->
		<div class="row">
			<div class="col-md-2 mb-1">
			</div>
			<div class="col-md-2 mb-1">
				<label for="street_number">Street #</label>
				<input class="form-control" id="street_number" disabled="true">
			</div>
			<div class="col-md-6 mb-1">
				<label for="route">Route</label>
				<input class="form-control" id="route" disabled="true">
			</div>
			<div class="col-md-2 mb-1">
			</div>
		</div>

		<!-- Row: City, State, and Zip Code-->
		<div class="row">

			<!-- following comment left in from Google sample code -->

			<!-- Note: Selection of address components in this example is typical.
			 You may need to adjust it for the locations relevant to your app. See
			 https://developers.google.com/maps/documentation/javascript/examples/places-autocomplete-addressform
			-->
			<div class="col-md-2 mb-1">
			</div>
			<div class="col-md-4 mb-1">
				<label for="locality">City</label>
				<input class="form-control" id="locality" disabled="true">
			</div>
			<div class="col-md-2 mb-1">
				<label for="administrative_area_level_1">State</label>
				<input class="form-control" id="administrative_area_level_1" disabled="true">
			</div>
			<div class="col-md-2 mb-1">
				<label for="postal_code">Zip Code</label>
				<input class="form-control" id="postal_code" disabled="true">
			</div>
			<div class="col-md-2 mb-1">
			</div>
		</div>

		<!-- Row: Country -->
		<div class="row">
			<div class="col-md-2 mb-4">
			</div>
			<div class="col-md-4 mb-4">
				<label for="country">Country</label>
				<input class="form-control" id="country" disabled="true">
			</div>
			<div class="col-md-2 mb-4">
			</div>
			<div class="col-md-2 mb-4">
			</div>
		</div>
	</form>

	<!-- Row: Address Submit Button and Display -->
	<div class="row">
		<div class="col-md-2 mb-4">
		</div>
		<div class="col-md-2 mb-4">
			<button type="button" id="bakeryButton" class="btn btn-secondary btn-lg" disabled>Bakery Button</button>
		</div>
		<div class="col-md-2 mb-4">
		</div>
		<div class="col-md-4 mb-4">
			<p id="bakeryDisplay"></p>
		</div>
		<div class="col-md-2 mb-4">
		</div>
	</div>
</div>


<script>
	/* 	comments and code left in from code sample 
		our code is built on top of the code sample 
	*/ 

	// This example displays an address form, using the autocomplete feature
	// of the Google Places API to help users fill in the information.

	// This example requires the Places library. Include the libraries=places
	// parameter when you first load the API. For example:
	// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

	var placeSearch, autocomplete;
	var componentForm = {
		street_number: 'short_name',
		route: 'long_name',
		locality: 'long_name',
		administrative_area_level_1: 'short_name',
		country: 'long_name',
		postal_code: 'short_name'
	};

	// completeAddress holds the entire address string, addressObject holds address components
	let completeAddress;
	let addressObject;

	// bakery html elements 
	const bakeryDisplay = document.getElementById('bakeryDisplay');
	const bakeryButton = document.getElementById("bakeryButton")

	function initAutocomplete() {
		// Create the autocomplete object, restricting the search to geographical
		// location types.
		autocomplete = new google.maps.places.Autocomplete(
			/** @type {!HTMLInputElement} */(document.getElementById('autocomplete')), {types: ['geocode']});

		// When the user selects an address from the dropdown, populate the address
		// fields in the form.
		autocomplete.addListener('place_changed', fillInAddress);
	}

	function fillInAddress() {
		// Get the place details from the autocomplete object.
		var place = autocomplete.getPlace();

		// reset completeAddress and addressObject
		completeAddress = "";
		addressObject = {};

		for (var component in componentForm) {
			document.getElementById(component).value = '';
			document.getElementById(component).disabled = false;
		}

		// Get each component of the address from the place details
		// and fill the corresponding field on the form.
		for (var i = 0; i < place.address_components.length; i++) {
			var addressType = place.address_components[i].types[0];
			// for places such as Brooklyn
			if (addressType === "sublocality_level_1"){
				addressType = "locality";
			}
			if (componentForm[addressType]) {
				var val = place.address_components[i][componentForm[addressType]];
				document.getElementById(addressType).value = val;
				completeAddress += val;
				addressObject[addressType] = val;
			}
			document.getElementById("bakeryButton").disabled = false;
		}
	}

	// Bias the autocomplete object to the user's geographical location,
	// as supplied by the browser's 'navigator.geolocation' object.
	function geolocate() {
		if (navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(function(position) {
				var geolocation = {
					lat: position.coords.latitude,
					lng: position.coords.longitude
				};
				var circle = new google.maps.Circle({
					center: geolocation,
					radius: position.coords.accuracy
				});
				autocomplete.setBounds(circle.getBounds());
			});
		}
	}

	function createElementTextNode(type, text){
		/* creates an element node that has a text node child
		*/

		// create the nodes and append the text node to the element node
		const node = document.createElement(type);
		const textNode = document.createTextNode(text);
		node.appendChild(textNode);

		return node;
	}

	function bakeryRequest(){
		// retrieve closest bakery from db

		return new Promise(function(fulfill, reject){

			//const postal = addressObject['postal_code'];
			//const query = "../findBakery" + "?postal=" + postal;
			//console.log(query);

			const query = "../order/new"

			// GET XMLHttpRequest to the app to retrieve a bakery object
			const req = new XMLHttpRequest();
			req.open('POST', query);
			req.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

			// on load process bakery object
			req.addEventListener('load', function(){
				if (req.status >= 200 && req.status <= 400){
					const response = req.responseText;
					console.log(response);
					fulfill(response);
				}
				else{
					reject('bad status code: ' + req.status);
				}
			});

			const body = 'address=' + completeAddress;
			req.send(body);
		});
	}

	function bakeryDisplayUpdate(){
		// retrieve a bakery, display its information, and then turn button off
		const bakeryPromise = bakeryRequest();
		bakeryPromise.then((response) => {
			const bakeryNode = createElementTextNode('p', response);
			bakeryDisplay.append(bakeryNode);
			//console.log('success');
		});
		bakeryButton.disabled = true;
	}

	// make a bakery retrieval when button is clicked
	bakeryButton.addEventListener("click", bakeryDisplayUpdate);

</script>
<script>
	// this script will generate the commented script below
	const placesLink = "https://maps.googleapis.com/maps/api/js?key={{PLACES_KEY}}&libraries=places&callback=initAutocomplete";
	const placesScript = document.write('<script src=' + placesLink + ' async defer></' + 'script>');
</script>

<!--
<script src="https://maps.googleapis.com/maps/api/js?key={{PLACES_KEY}}&libraries=places&callback=initAutocomplete"
async defer></script>
-->
